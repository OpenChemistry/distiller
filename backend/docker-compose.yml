version: '2.4'

services:
  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      zoo1:
        condition: service_started

  fast-api:
    build: 
      context: ./app
      dockerfile: Dockerfile
    platform: linux/amd64
    container_name: fast-api
    command: |
      /bin/bash -c "cd /app && \
      mkdir -p /tmp/haadf/png && \
      mkdir -p /tmp/haadf/dm4 && \
      mkdir -p /tmp/haadf/scans/png && \
      alembic upgrade head && \
      python /app/app/cli/create_user.py --username 'distiller' --fullname 'User One' --password 'password' && \
      /start.sh"
    ports:
     - "8000:80"
    environment:
      BACKEND_CORS_ORIGINS: '["http://localhost:8000", "http://localhost:3000"]'
      POSTGRES_SERVER: postgres
      POSTGRES_USER: postgres 
      POSTGRES_PASSWORD: mysecretpassword 
      POSTGRES_DB: postgres
      SERVER_HOST: http://fast-api:80/api/v1
      KAFKA_BOOTSTRAP_SERVERS: '["kafka:19092"]'
      MACHINES: '[{"name": "perlmutter", "account": "m3795", "qos": "realtime", "nodes": 2, "ntasks": 2, "constraint": "cpu", "cpus_per_task": 128, "ntasks_per_node": 2, "bbcp_dest_dir": "/tmp/ncem"}]'
      NCEMHUB_PATH: "/tmp"
    depends_on:
      kafka:
        condition: service_started
      zoo1:
        condition: service_started
      postgres:
        condition: service_started
    volumes:
      - ./app/alembic:/app/alembic
    restart: on-failure

  postgres:
    image: postgres
    environment:
      POSTGRES_SERVER: postgres
      POSTGRES_USER: postgres 
      POSTGRES_PASSWORD: mysecretpassword 
      POSTGRES_DB: postgres
    platform: linux/amd64
    container_name: postgres
    depends_on:
      kafka:
        condition: service_started
      zoo1:
        condition: service_started
    restart: on-failure

  job-worker:
    build:
      context: ./faust
      dockerfile: Dockerfile.job_worker
    platform: linux/amd64
    container_name: job-worker
    environment:
      KAFKA_BROKER: kafka:19092
      KAFKA_URL: "kafka://kafka:19092"
      API_URL: "http://fast-api:80/api/v1"
    depends_on:
      kafka:
        condition: service_started
      zoo1:
        condition: service_started
      fast-api:
        condition: service_started
    restart: on-failure

  notebook-worker:
    build: 
      context: ./faust
      dockerfile: Dockerfile.notebook_worker
    platform: linux/amd64
    container_name: notebook-worker
    environment:
      KAFKA_BROKER: kafka:19092
      KAFKA_URL: "kafka://kafka:19092"
      API_URL: "http://fast-api:80/api/v1"
    depends_on:
      kafka:
        condition: service_started
      zoo1:
        condition: service_started
      fast-api:
        condition: service_started
    restart: on-failure

  cron-worker:
    build: 
      context: ./faust
      dockerfile: Dockerfile.worker
      args: 
        - WORKER=cron
    platform: linux/amd64
    container_name: cron-worker
    environment:
      KAFKA_BROKER: kafka:19092
      KAFKA_URL: "kafka://kafka:19092"
      API_URL: "http://fast-api:80/api/v1"
    depends_on:
      kafka:
        condition: service_started
      zoo1:
        condition: service_started
      fast-api:
        condition: service_started
    restart: on-failure

  custodian-worker:
    build: 
      context: ./faust
      dockerfile: Dockerfile.worker
      args: 
        - WORKER=custodian
    platform: linux/amd64
    container_name: custodian-worker
    environment:
      KAFKA_BROKER: kafka:19092
      KAFKA_URL: "kafka://kafka:19092"
      API_URL: "http://fast-api:80/api/v1"
    depends_on:
      kafka:
        condition: service_started
      zoo1:
        condition: service_started
      fast-api:
        condition: service_started
    restart: on-failure

  scan-file-worker:
    build: 
      context: ./faust
      dockerfile: Dockerfile.worker
      args: 
        - WORKER=scan_file
    platform: linux/amd64
    container_name: scan-file-worker
    environment:
      KAFKA_BROKER: kafka:19092
      KAFKA_URL: "kafka://kafka:19092"
      API_URL: "http://fast-api:80/api/v1"
    depends_on:
      kafka:
        condition: service_started
      zoo1:
        condition: service_started
      fast-api:
        condition: service_started
    restart: on-failure

  scan-worker:
    build: 
      context: ./faust
      dockerfile: Dockerfile.worker
      args: 
        - WORKER=scan
    platform: linux/amd64
    container_name: scan-worker
    environment:
      KAFKA_BROKER: kafka:19092
      KAFKA_URL: "kafka://kafka:19092"
      API_URL: "http://fast-api:80/api/v1"
    depends_on:
      kafka:
        condition: service_started
      zoo1:
        condition: service_started
      fast-api:
        condition: service_started
    restart: on-failure
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { getMachines as getMachinesAPI } from './api';

export type MachinesState = {
  status: 'idle' | 'loading' | 'complete';
  machines: string[];
};

const initialState: MachinesState = {
  status: 'idle',
  machines: [],
};

export const getMachines = createAsyncThunk<string[]>(
  'machines/fetch',
  async (_payload, _thunkAPI) => {
    const result = await getMachinesAPI();

    return result;
  }
);

export const machinesSlice = createSlice({
  name: 'machines',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getMachines.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getMachines.rejected, (state) => {
        state.status = 'idle';
      })
      .addCase(getMachines.fulfilled, (state, action) => {
        const machines = action.payload;

        state.status = 'complete';
        state.machines = machines;
      });
  },
});

export const machinesSelector = (state: RootState) => state.machines;

export default machinesSlice.reducer;

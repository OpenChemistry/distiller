import {
  createAsyncThunk,
  createSlice,
  createEntityAdapter,
} from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { getMachines as getMachinesAPI } from './api';
import { Machine } from '../../types';

export const machinesAdapter = createEntityAdapter<Machine>({
  selectId: (machine) => machine.name,
  sortComparer: (a, b) => a.name.localeCompare(b.name),
});

export interface MachinesState
  extends ReturnType<typeof machinesAdapter.getInitialState> {
  status: 'idle' | 'loading' | 'complete';
}

const initialState: MachinesState = machinesAdapter.getInitialState({
  status: 'idle',
});

export const getMachines = createAsyncThunk<Machine[]>(
  'machines/fetch',
  async (_payload, _thunkAPI) => {
    const result = await getMachinesAPI();

    return result.map((machine) => ({
      ...machine,
      status: 'unknown',
      notes: [],
    }));
  }
);

export const getMachineState = createAsyncThunk<Machine, Machine>(
  'machines/machine_state',
  async (payload, _thunkAPI) => {
    const result = await fetch(payload.statusURL).then((res) => res.json());
    const { status, notes } = result;

    return { ...payload, status, notes };
  }
);

export const machinesSlice = createSlice({
  name: 'machines',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getMachines.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getMachines.rejected, (state) => {
        state.status = 'idle';
      })
      .addCase(getMachines.fulfilled, (state, action) => {
        const machines = action.payload;

        state.status = 'complete';
        machinesAdapter.setAll(state, machines);
      })
      .addCase(getMachineState.fulfilled, (state, action) => {
        const machine = action.payload;
        machinesAdapter.upsertOne(state, machine);
      });
  },
});

export const machineState = (rootState: RootState) => rootState.machines;
export const machineSelectors = machinesAdapter.getSelectors();

export default machinesSlice.reducer;

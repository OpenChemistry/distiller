import { createAsyncThunk, createSlice, createEntityAdapter } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { getScans as getScansAPI } from './api';
import { Scan } from '../../types';

export const scansAdapter = createEntityAdapter<Scan>();

export interface ScansState extends ReturnType<typeof scansAdapter['getInitialState']> {
  status: 'idle' | 'loading' | 'complete';
}

const initialState: ScansState = scansAdapter.getInitialState({status: 'idle'});

export const getScans = createAsyncThunk<Scan[]>(
  'scans/fetch',
  async (_payload, _thunkAPI) => {
    const scans = await getScansAPI();

    return scans;
  }
);

export const scansSlice = createSlice({
  name: 'scans',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getScans.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getScans.rejected, (state) => {
        state.status = 'idle';
      })
      .addCase(getScans.fulfilled, (state, action) => {
        state.status = 'complete';
        scansAdapter.setAll(state, action.payload);
      });
  },
});

export const scansSelector = scansAdapter.getSelectors<RootState>(state => state.scans);

export default scansSlice.reducer;

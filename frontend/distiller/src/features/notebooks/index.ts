import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { getNotebooks as getNotebooksAPI } from './api';

export interface NotebooksState {
  notebooks: string[];
  status: 'pending' | 'error' | 'loading' | 'complete';
}

const initialState: NotebooksState = {
  notebooks: [],
  status: 'pending',
};

export const getNotebooks = createAsyncThunk<string[]>(
  'notebooks/fetch',
  async (_payload, _thunkAPI) => {
    const result = await getNotebooksAPI();

    return result;
  },
);

export const notebooksSlice = createSlice({
  name: 'notebooks',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getNotebooks.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getNotebooks.rejected, (state) => {
        state.status = 'error';
      })
      .addCase(getNotebooks.fulfilled, (state, action) => {
        const notebooks = action.payload;

        state.status = 'complete';
        state.notebooks = notebooks;
      });
  },
});

export const notebooksState = (rootState: RootState) => rootState.microscopes;
export const selectNotebooks = (state: RootState) => state.notebooks.notebooks;

export default notebooksSlice.reducer;

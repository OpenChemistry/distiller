import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { authenticate as authenticateAPI, getUser as getUserAPI } from './api';
import { User } from '../../types';
import { apiClient } from '../../client';

export interface AuthState {
  user?: User;
  status: 'authenticated' | 'authenticating' | 'anonymous';
}

const initialState: AuthState = {
  user: undefined,
  status: 'anonymous',
};

type AuthenticatePayload = {username: string, password: string};
export const login = createAsyncThunk<User, AuthenticatePayload>(
  'auth/authenticate',
  async (payload, _thunkAPI) => {
    const {username, password} = payload;

    const auth = await authenticateAPI(username, password);

    const {access_token, token_type } = auth;
    apiClient.setToken(`${token_type} ${access_token}`);
    const user = await getUserAPI();

    return user;
  }
);

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    logout(state) {
      apiClient.setToken(undefined);
      state.status = 'anonymous';
      state.user = undefined;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(login.pending, (state) => {
        state.status = 'authenticating';
        state.user = undefined;
      })
      .addCase(login.rejected, (state) => {
        state.status = 'anonymous';
        state.user = undefined;
      })
      .addCase(login.fulfilled, (state, action) => {
        state.status = 'authenticated';
        state.user = action.payload;
      });
  },
});

export const { logout } = authSlice.actions;

export const isAuthenticated = (state: RootState) => state.auth.status === 'authenticated';
export const getUser = (state: RootState) => state.auth.user;

export default authSlice.reducer;

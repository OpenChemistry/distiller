{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Prepare a vacuum scan for subtraction from other scans\n",
    " - Once completed, use vacuum_scan_subtract.ipynb to apply the vacuum scan subtraction to other scans\n",
    " - Each scan must have the same STEM magnification and camera length."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib widget\n",
    "\n",
    "from pathlib import Path\n",
    "from collections import namedtuple\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.colors import LogNorm,PowerNorm\n",
    "from matplotlib.patches import Circle\n",
    "import numpy as np\n",
    "from numpy.linalg import svd\n",
    "import imageio\n",
    "from scipy import ndimage\n",
    "\n",
    "import stempy.io as stio\n",
    "import stempy.image as stim\n",
    "\n",
    "import ncempy\n",
    "\n",
    "def planeFit(points):\n",
    "    \"\"\"\n",
    "    p, n = planeFit(points)\n",
    "\n",
    "    Given an array, points, of shape (d,...)\n",
    "    representing points in d-dimensional space,\n",
    "    fit an d-dimensional plane to the points.\n",
    "    Return a point, p, on the plane (the point-cloud centroid),\n",
    "    and the normal, n.\n",
    "\n",
    "    \"\"\"\n",
    "\n",
    "    points = np.reshape(points, (np.shape(points)[0], -1)) # Collapse trialing dimensions\n",
    "    assert points.shape[0] <= points.shape[1], \"There are only {} points in {} dimensions.\".format(points.shape[1], points.shape[0])\n",
    "    ctr = points.mean(axis=1)\n",
    "    x = points - ctr[:,np.newaxis]\n",
    "    M = np.dot(x, x.T) # Could also use np.cov(x) here.\n",
    "    return ctr, svd(M)[0][:,-1]\n",
    "\n",
    "def get_scan_path(directory, scan_num=None, scan_id=None, th=None):\n",
    "    \"\"\" Get the file path for a 4D Camera scan using the scan number or \n",
    "    the Distiller scan id. The threshold is optional. scan_id should always\n",
    "    be unique and is the best option to load a dataset.\n",
    "    \n",
    "    A ValueError is raised if more than one file matches the input. Then the user\n",
    "    needs to input more information to narrow down the choices.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    directory : pathlib.Path or str\n",
    "        The path to the directory containing the file.\n",
    "    scan_id : int, optional\n",
    "        The Distiller scan id.\n",
    "    scan_num : int\n",
    "        The 4D Camera scan number. Optional\n",
    "    th : float, optional\n",
    "        The threshold for counting. This is added to the filename in some cases.\n",
    "        \n",
    "    Returns\n",
    "    -------\n",
    "    : tuple\n",
    "        The tuple contains the file that matches the input information and the \n",
    "        scan_num and scan_id as a tuple.\n",
    "    \"\"\"\n",
    "    if scan_id is not None:\n",
    "        # This should be unique\n",
    "        file_path = list(directory.glob(f'*_id{scan_id}*.h5'))\n",
    "    elif scan_num is not None:\n",
    "        # older files might include the threshold (th)\n",
    "        if th is not None:\n",
    "            file_path = list(directory.glob('data_scan{}_th{}_electrons.h5'.format(scan_num, th)))\n",
    "        else:\n",
    "            file_path = list(directory.glob('data_scan{}*electrons.h5'.format(scan_num)))\n",
    "    else:\n",
    "        raise TypeError('Missing scan_num or scan_id input.')\n",
    "\n",
    "    if len(file_path) > 1:\n",
    "        raise ValueError('Multiple files match that input. Add scan_id to be more specific.')\n",
    "    elif len(file_path) == 1:\n",
    "        file_path = file_path[0]\n",
    "        # Determine the scan_id and scan_num for use later (i.e. getting DM4 file)\n",
    "        spl = file_path.name.split('_')\n",
    "        for ii in spl:\n",
    "            if 'id' in ii:\n",
    "                scan_id = int(ii[len('id'):])\n",
    "            elif 'scan' in ii:\n",
    "                scan_num = int(ii[len('scan'):])\n",
    "    else:\n",
    "        raise FileNotFoundError('No file with those parameters can be found.')\n",
    "    return file_path, scan_num, scan_id\n",
    "\n",
    "distiller_path = Path('/global/cfs/cdirs/ncemhub/distiller/')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load the vacuum scan data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Close all previous windows to avoid too many windows\n",
    "plt.close('all')\n",
    "\n",
    "date = Path('2023.01.13')\n",
    "scan_id = {{ scan.id }}\n",
    "scan_num = {{ scan.scan_id }}\n",
    "th = None # optional; use None or integer\n",
    "\n",
    "fname, scan_num, scan_id = get_scan_path(distiller_path / Path('counted') / Path(date), scan_num, scan_id=scan_id)\n",
    "\n",
    "# Load the sparse data\n",
    "vacuum_scan = stio.load_electron_counts(fname)\n",
    "# Remove the flyback\n",
    "vacuum_scan = vacuum_scan[:, :-1, :, :]\n",
    "\n",
    "print('File: {}'.format(fname))\n",
    "print('Scan dimensions = {}'.format(vacuum_scan.scan_shape))\n",
    "\n",
    "# Load the HAADF (if available)\n",
    "haadf_path = distiller_path / Path('dm4') / Path(date) / Path(f'scan{scan_num}.dm4')\n",
    "\n",
    "if haadf_path.exists():\n",
    "    with ncempy.io.dm.fileDM(haadf_path) as f0:\n",
    "        md = f0.getMetadata(0)\n",
    "        camera_length = md['Microscope Info STEM Camera Length']\n",
    "        stem_magnification = md['Microscope Info Indicated Magnification']\n",
    "        print(f'Camera length = {camera_length} mm')\n",
    "        print(f'STEM magnification = {stem_magnification} kx')\n",
    "else:\n",
    "    print('No HAADF available')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Find the center of the center beam at each scan position\n",
    " - $center$ variable should be the average x and y position of the beam\n",
    " - $radius$ variable should contain all possible positions of the beam. All electrons outside this radius will be ignored"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the summed diffraction pattern to set hyperparameters\n",
    "dp = vacuum_scan.sum(axis=(0, 1))\n",
    "\n",
    "# Get a single dense diffraction pattern from the center\n",
    "dp0 = vacuum_scan[vacuum_scan.scan_shape[0]//2, vacuum_scan.scan_shape[1]//2, :, :]\n",
    "\n",
    "# Set the center of the pattern (use figure below for manual)\n",
    "center = stim.com_dense(dp) # use the center of mass of the summed pattern\n",
    "center = (290, 293) # manually define as column, row from plot (if automated technique fails)\n",
    "print(f'Average center of beam = {center}')\n",
    "\n",
    "# Define the radius for iterative processing\n",
    "radius = 40 # pixels\n",
    "\n",
    "fg,ax = plt.subplots(1, 2, sharex=True, sharey=True)\n",
    "ax[1].imshow(dp, norm=PowerNorm(0.75))\n",
    "ax[1].scatter(center[0], center[1], c='r')\n",
    "ax[1].add_patch(Circle(center, radius=radius, fc=None, fill=None, ec='r'))\n",
    "ax[0].imshow(dp0, norm=PowerNorm(0.75))\n",
    "ax[0].set(title='single pattern')\n",
    "ax[1].set(title='summed pattern')\n",
    "ax[1].legend(['center of pattern', 'crop_to radius']);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the center of mass (COM) iteratively for each scan position\n",
    "com2 = stim.com_sparse(vacuum_scan, crop_to=(radius, radius), init_center=center[::-1])\n",
    "\n",
    "fg,ax = plt.subplots(1, 2)\n",
    "ax[0].imshow(com2[0,]-com2_median[0], vmin=-com2_std[0]*3, vmax=com2_std[0]*3, cmap='bwr')\n",
    "ax[0].set(title='COM: axis 0')\n",
    "ax[1].imshow(com2[1,]-com2_median[1], vmin=-com2_std[1]*3, vmax=com2_std[1]*3, cmap='bwr')\n",
    "ax[1].set(title='COM: axis 1')\n",
    "\n",
    "fg,ax = plt.subplots(1, 2)\n",
    "ax[0].hist(com2[0,].ravel() - com2_median[0])\n",
    "ax[0].set(title='COM: axis 0')\n",
    "ax[1].hist(com2[1,].ravel()-com2_median[1])\n",
    "ax[1].set(title='COM: axis 1');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove the outliers by median filtering\n",
    "com2_filt = np.zeros_like(com2)\n",
    "com2_filt[0,] = ndimage.median_filter(com2[0,], size=(5, 5))\n",
    "com2_filt[1,] = ndimage.median_filter(com2[1,], size=(5, 5))\n",
    "\n",
    "com2_median = np.median(com2_filt, axis=(1, 2))\n",
    "\n",
    "fg,ax = plt.subplots(1, 2,sharex=True,sharey=True)\n",
    "ax[0].imshow(com2_filt[0,]-com2_median[0],cmap='bwr',vmin=-3,vmax=3)\n",
    "ax[0].set(title='COM: axis 0')\n",
    "ax[1].imshow(com2_filt[1,]-com2_median[1],cmap='bwr',vmin=-3,vmax=3);\n",
    "ax[1].set(title='COM: axis 1');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit the beam motion to reduce noise\n",
    " - If the motion is linear then a plane is sufficient\n",
    " - If the motion is non-linear then use interpolation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Interpolate to fit the vacuum scan_shape\n",
    "\n",
    "YY, XX = np.mgrid[0:com2.shape[1], 0:com2.shape[2]]\n",
    "\n",
    "# Interpolation\n",
    "com2_fit = np.zeros((2, *XX.shape))\n",
    "com2_fit[0,:,:] = ndimage.map_coordinates(com2_filt[0,:,:], (YY.ravel(), XX.ravel()),mode='nearest').reshape(XX.shape)\n",
    "com2_fit[1,:,:] = ndimage.map_coordinates(com2_filt[1,:,:], (YY.ravel(), XX.ravel()),mode='nearest').reshape(XX.shape)\n",
    "\n",
    "com2_fit_median = np.median(com2_fit,axis=(1,2))\n",
    "\n",
    "# Fit to a plane\n",
    "planeCOM0 = planeFit(np.stack((YY, XX, com2_filt[0,]-com2_median[0])))\n",
    "planeCOM1 = planeFit(np.stack((YY, XX, com2_filt[1,]-com2_median[1])))\n",
    "\n",
    "print(f'plane fit to COM0: {planeCOM0}')\n",
    "print(f'plane fit to COM1: {planeCOM1}')\n",
    "\n",
    "normal = planeCOM0[1]\n",
    "d = np.dot(-planeCOM0[0], normal)\n",
    "# calculate corresponding z\n",
    "z0 = (-normal[0]*YY - normal[1]*XX - d)/normal[2]\n",
    "\n",
    "normal = planeCOM1[1]\n",
    "d = np.dot(-planeCOM1[0], normal)\n",
    "# calculate corresponding z\n",
    "z1 = (-normal[0]*YY - normal[1]*XX - d)/normal[2]\n",
    "\n",
    "# Plot everything together\n",
    "fg,ax = plt.subplots(2, 3)\n",
    "ax[0, 0].imshow(com2_filt[0,],cmap='bwr')\n",
    "ax[0, 0].set(title='Experimental')\n",
    "ax[0, 1].imshow(z0, cmap='bwr')\n",
    "ax[0, 1].set(title='Linear plane fit')\n",
    "ax[1, 0].imshow(com2_filt[1,],cmap='bwr')\n",
    "ax[1, 1].imshow(z1, cmap='bwr')\n",
    "ax[0, 2].imshow(com2_fit[0,]-com2_fit_median[0], cmap='bwr')\n",
    "ax[1, 2].imshow(com2_fit[1,]-com2_fit_median[1], cmap='bwr')\n",
    "ax[0, 2].set(title='Interpolation')\n",
    "fg.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Remove shifts from the vacuum scan to test the fit\n",
    " - Set the $method$ variable according to the type of shift you want to use in the correction (usually interp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test centering on the vacuum scan itself\n",
    "method = 'interp' # choose plane or interp\n",
    "\n",
    "if method == 'interp':\n",
    "    scan_origin0 = com2_fit[0,]\n",
    "    scan_origin1 = com2_fit[1,]\n",
    "elif method == 'plane':\n",
    "    scan_origin0 = z0\n",
    "    scan_origin1 = z1\n",
    "else:\n",
    "    raise ValueError(f\"Incorrrect method: {method}\")\n",
    "scan_origin0_round = np.round(scan_origin0).astype(np.int32) - int(scan_origin0.mean())\n",
    "scan_origin1_round = np.round(scan_origin1).astype(np.int32) - int(scan_origin1.mean())\n",
    "\n",
    "# Ensure the data sets are the same size\n",
    "assert vacuum_scan.data.shape[0] == scan_origin0_round.ravel().shape[0]\n",
    "\n",
    "centered = np.empty_like(vacuum_scan.data)\n",
    "for ii, (eev, x, y) in enumerate(zip(vacuum_scan.data, scan_origin0_round.ravel(), scan_origin1_round.ravel())):\n",
    "    for jj, ev in enumerate(eev):\n",
    "        evx, evy = np.unravel_index(ev, vacuum_scan.frame_shape)\n",
    "        evx_centered = evx - y # need to flip x and y\n",
    "        evy_centered = evy - x\n",
    "\n",
    "        # Some events will get pushed off the detector by the shift. Remove them\n",
    "        keep = (evx_centered < vacuum_scan.frame_shape[0]) & (evx_centered >= 0) & (evy_centered < vacuum_scan.frame_shape[1]) & (evy_centered >= 0)\n",
    "        evx_centered = evx_centered[keep]\n",
    "        evy_centered = evy_centered[keep]\n",
    "\n",
    "        centered[ii, jj] = np.ravel_multi_index((evx_centered,evy_centered), vacuum_scan.frame_shape)\n",
    "\n",
    "vacuum_scan_centered = stio.SparseArray(centered, vacuum_scan.scan_shape, vacuum_scan.frame_shape)\n",
    "\n",
    "dp = vacuum_scan.sum(axis=(0,1))\n",
    "dp2 = vacuum_scan_centered.sum(axis=(0,1))\n",
    "\n",
    "fg,ax = plt.subplots(1,2,sharex=True,sharey=True)\n",
    "ax[0].imshow(dp)\n",
    "ax[0].set(title='Summed raw data')\n",
    "ax[1].imshow(dp2)\n",
    "ax[1].set(title='Summed centered data');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the data for use on other datasets\n",
    "\n",
    "# Save the centered vacuum scan to a stempy dataset\n",
    "scan_out_path = fname.with_name(fname.stem + '_centered.h5')\n",
    "vacuum_scan_centered.write_to_hdf5(scan_out_path)\n",
    "print(f'Centered scan saved to: {scan_out_path}')\n",
    "\n",
    "# Save the scan shift data as an EMD file\n",
    "offsets_out_path = fname.with_name(fname.stem + '_offsets.emd')\n",
    "\n",
    "if offsets_out_path.exists():\n",
    "    raise FileExistsError(f'Offsets file {offsets_out_path} already exists.\\nDelete and resave to update the file')\n",
    "else:\n",
    "    with ncempy.io.emd.fileEMD(offsets_out_path, readonly=False) as f0:\n",
    "        dims0 = ncempy.io.emd.defaultDims(com2_filt)\n",
    "        f0.put_emdgroup('vacuum_COM', com2_filt, dims0)\n",
    "    print(f'Offsets saved to: {offsets_out_path}')\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "stempy",
   "language": "python",
   "name": "stempy"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0a7ff6f2249645d2a6da780ea6276167": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "0ace1cc1bfb748a68ab441613eda3b63": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "0b5a9475b21c4d669d00691ffea71f88": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_eebdcb3757e940f98a7c963b97552e40",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "183c6f785c764532abc4f6e54371265a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "190f18085b314863871c65a1b4ffab12": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_7a51c31717084659ba07f4d576466d48",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "1fe680af36f24f7aa80d0cf19736e084": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "25f036115e5b4b098c0231e2ecf26e57": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "2aceeebc2f5c41cd99d6437adc72aac5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "2c3f0011eef2490a99a531657ec35100": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "311e24ee126e4a0896373801a0a585b1": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_5a98140e564c47e1bd23c25b3dfe6612",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "3137b959643e4616bd2d87b0f34c2bfe": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "31a7f0642dc44611831380b04b271a09": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "32e38b72800643c79bbc515bd186447d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "361f4627a28347ce9ba41a8e481bcb68": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "414e6c977cf1460faf4054742752f51a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "431490a1d17d47fc854abb798482a050": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "48311a2e11e44437adb4a63653c7e12e": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_c09ac355111f4050be723426fe52388f",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "4c9b36e542334279bcaadbeb7e0acdca": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_6fa66fbda5694ee49094699c1a05cefa",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "5299da3e88344a2b9bad39a8922c9550": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_c46e65f669d743b98a9faf4fc2519008",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "53b03b381cae4941acaf8d81fc0ab57b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "557137aa76f04bb284bd58ce2dcf4fcf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "5a98140e564c47e1bd23c25b3dfe6612": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "60c809b7e5c24a4ba818c91c599748a6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "627bc454a4924c26961faf0d8bbbdaf9": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_183c6f785c764532abc4f6e54371265a",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "656940e2afe44782941c870e945dadac": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "665dd5193b9446e1827c19258bdcd4dd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "6b36696fdcd4406689ea5da6a76d5493": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "6d1ac8f67730488a91927d2d9df88b02": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "6fa66fbda5694ee49094699c1a05cefa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "72b8f30cb2e14fc7a53082522cd26326": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "79a6d90760964586836255b9c6f003fa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "7a51c31717084659ba07f4d576466d48": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "7a71b81c874843c88e55d768e0100e43": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_31a7f0642dc44611831380b04b271a09",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "7cc51d079945458387e3c307cb29f465": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "7ce045bb32064389a1a5f8ed0c91b621": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "81a5964d121749348d3c16bc4bbc4589": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "88360f7d067c4362850fc5c2d2148fa7": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "MPLCanvasModel",
      "state": {
       "_cursor": "default",
       "_figure_label": "Figure 5",
       "_height": 480,
       "_message": "x=7. y=104.\n[-2.1]",
       "_width": 640,
       "layout": "IPY_MODEL_7cc51d079945458387e3c307cb29f465",
       "toolbar": "IPY_MODEL_df9067fbc02c4394b999d64c6ef8c63b",
       "toolbar_position": "left"
      }
     },
     "91c8954f2af442b2a4177ccba531e288": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "93d36a61e68f4e65b9b0b67638c359cb": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "MPLCanvasModel",
      "state": {
       "_cursor": "default",
       "_figure_label": "Figure 2",
       "_height": 480,
       "_width": 640,
       "layout": "IPY_MODEL_e2b089ab4b52419298da7a2b207c1138",
       "toolbar": "IPY_MODEL_e99f78edb4b74ab79236958adf09388f",
       "toolbar_position": "left"
      }
     },
     "9fba53d28c354ed6ab6e5e2ae72436cc": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_fe265c298c5b4db49c71c28c9f35c8f8",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "a07b474ac4864dcca2fef3f8687c8912": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_32e38b72800643c79bbc515bd186447d",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "b5677acb500146b184e74fcf704eb516": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_25f036115e5b4b098c0231e2ecf26e57",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "b6de89f22f534166aab1f0c8e4a8f420": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_d05268fff86f463ab8389145976d51b6",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "b7352c3d7eee4e37b727f70f77ed1ee1": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "MPLCanvasModel",
      "state": {
       "_cursor": "default",
       "_figure_label": "Figure 3",
       "_height": 480,
       "_width": 640,
       "layout": "IPY_MODEL_431490a1d17d47fc854abb798482a050",
       "toolbar": "IPY_MODEL_b6de89f22f534166aab1f0c8e4a8f420",
       "toolbar_position": "left"
      }
     },
     "b8b2efceb351469ca238000215f3a74f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "be457c03d02d41e2900a6993a00214b0": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "MPLCanvasModel",
      "state": {
       "_cursor": "default",
       "_figure_label": "Figure 1",
       "_height": 480,
       "_width": 640,
       "layout": "IPY_MODEL_fbacb63ca2d4485dae17024b38168657",
       "toolbar": "IPY_MODEL_c782c1f0eee844ccb6a5998c1071a565",
       "toolbar_position": "left"
      }
     },
     "be6b22d5682f4051a28183116e791d0f": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_60c809b7e5c24a4ba818c91c599748a6",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "be8791ffb734412b96ed6ba5e00b51d6": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "_current_action": "zoom",
       "layout": "IPY_MODEL_53b03b381cae4941acaf8d81fc0ab57b",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "c09ac355111f4050be723426fe52388f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "c46e65f669d743b98a9faf4fc2519008": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "c782c1f0eee844ccb6a5998c1071a565": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_eeb929b31b4b4866b459d2b1a4ed1d31",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "ce540ce4038f4035b875d67cdf5a3bea": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_0a7ff6f2249645d2a6da780ea6276167",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "d05268fff86f463ab8389145976d51b6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "d9aee0bdfbe546d4b0f177e73dea71e8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "dce78af2d1fb42de98dc5d1aeac41d65": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_91c8954f2af442b2a4177ccba531e288",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "df9067fbc02c4394b999d64c6ef8c63b": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_81a5964d121749348d3c16bc4bbc4589",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "dfe5e6369fbe4d2f98cd4392f102fa40": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e05edd6967054076a01fe984084d6532": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_3137b959643e4616bd2d87b0f34c2bfe",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "e2b089ab4b52419298da7a2b207c1138": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e99f78edb4b74ab79236958adf09388f": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_656940e2afe44782941c870e945dadac",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "eeb929b31b4b4866b459d2b1a4ed1d31": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "eebdcb3757e940f98a7c963b97552e40": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f49474502df2491c845838f48ed7e22d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f5fd7c930edb4b0396559acdb9848f80": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_6b36696fdcd4406689ea5da6a76d5493",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "f9db11b7282245f9a1ebf5dc88afaa54": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "MPLCanvasModel",
      "state": {
       "_cursor": "default",
       "_figure_label": "Figure 4",
       "_height": 480,
       "_message": "x=53. y=214.\n[-1.81]",
       "_width": 640,
       "layout": "IPY_MODEL_2aceeebc2f5c41cd99d6437adc72aac5",
       "toolbar": "IPY_MODEL_311e24ee126e4a0896373801a0a585b1",
       "toolbar_position": "left"
      }
     },
     "fac943f776b34eb39c56322ed9295520": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "fbacb63ca2d4485dae17024b38168657": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "fe265c298c5b4db49c71c28c9f35c8f8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ff0e1150aecc4058942ca354b927c2f2": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "MPLCanvasModel",
      "state": {
       "_cursor": "default",
       "_figure_label": "Figure 6",
       "_height": 480,
       "_width": 640,
       "layout": "IPY_MODEL_fac943f776b34eb39c56322ed9295520",
       "toolbar": "IPY_MODEL_7a71b81c874843c88e55d768e0100e43",
       "toolbar_position": "left"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

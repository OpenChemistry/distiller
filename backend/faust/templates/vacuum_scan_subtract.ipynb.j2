{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Remove beam shift from an experimental data set\n",
    " - This takes as input the offsets from a vacuum scan\n",
    " - see vacuum_scan_prepare.ipynb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib widget\n",
    "\n",
    "from pathlib import Path\n",
    "from collections import namedtuple\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.colors import LogNorm,PowerNorm\n",
    "from matplotlib.patches import Circle\n",
    "import numpy as np\n",
    "from numpy.linalg import svd\n",
    "from scipy import ndimage\n",
    "\n",
    "import stempy.io as stio\n",
    "import stempy.image as stim\n",
    "from stempy.contrib import get_scan_path, FileSuffix\n",
    "\n",
    "import ncempy\n",
    "\n",
    "def planeFit(points):\n",
    "    \"\"\"\n",
    "    p, n = planeFit(points)\n",
    "\n",
    "    Given an array, points, of shape (d,...)\n",
    "    representing points in d-dimensional space,\n",
    "    fit an d-dimensional plane to the points.\n",
    "    Return a point, p, on the plane (the point-cloud centroid),\n",
    "    and the normal, n.\n",
    "\n",
    "    \"\"\"\n",
    "\n",
    "    points = np.reshape(points, (np.shape(points)[0], -1)) # Collapse trialing dimensions\n",
    "    assert points.shape[0] <= points.shape[1], \"There are only {} points in {} dimensions.\".format(points.shape[1], points.shape[0])\n",
    "    ctr = points.mean(axis=1)\n",
    "    x = points - ctr[:,np.newaxis]\n",
    "    M = np.dot(x, x.T) # Could also use np.cov(x) here.\n",
    "    return ctr, svd(M)[0][:,-1]\n",
    "\n",
    "distiller_path = Path('{{ settings.NCEMHUB_PATH }}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load the experimental data to be fixed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load a sparse vacuum 4D camera data set \n",
    "date = '{{ scan_created_date }}'\n",
    "scan_num = {{ scan.scan_id }}\n",
    "scan_id = {{ scan.id }}\n",
    "threshold = None\n",
    "\n",
    "fname, scan_num, scan_id = get_scan_path(\n",
    "    distiller_path / Path(\"counted\") / Path(date),\n",
    "    scan_num=scan_num,\n",
    "    scan_id=scan_id,\n",
    "    version=1,\n",
    "    file_suffix=FileSuffix.STANDARD,\n",
    ")\n",
    "\n",
    "# Load the data\n",
    "experiment = stio.load_electron_counts(fname, keep_flyback=False) # remove flyback\n",
    "\n",
    "print('File: {}'.format(fname))\n",
    "print('Scan dimensions = {}'.format(experiment.scan_shape))\n",
    "\n",
    "# Load the HAADF (if available)\n",
    "haadf_path = distiller_path / Path('dm4') / Path(date) / Path(f'scan{scan_num}.dm4')\n",
    "\n",
    "if haadf_path.exists():\n",
    "    with ncempy.io.dm.fileDM(haadf_path) as f0:\n",
    "        md = f0.getMetadata(0)\n",
    "        camera_length = md['Microscope Info STEM Camera Length']\n",
    "        stem_magnification = md['Microscope Info Indicated Magnification']\n",
    "        print(f'Camera length = {camera_length} mm')\n",
    "        print(f'STEM magnification = {stem_magnification} kx')\n",
    "else:\n",
    "    print('No HAADF available')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load the output from the vacuum scan subtraction\n",
    " - This is output from the vacuum_scan_prepare.ipynb notebook\n",
    " - The user must enter the scan_id and scan_number of the vacuum subtraction data\n",
    " - The vacuum scan's metadata (if available) is checked to ensure the scan is compatible"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the offsets for the vacuum scan subtraction\n",
    "vacuum_scan_id = 14943\n",
    "vacuum_scan_num = 20\n",
    "\n",
    "# Load the Vacuum HAADF and check metadata (if available)\n",
    "vacuum_haadf_path = distiller_path / Path('dm4') / Path(date) / Path(f'scan{vacuum_scan_num}.dm4')\n",
    "\n",
    "if vacuum_haadf_path.exists():\n",
    "    with ncempy.io.dm.fileDM(vacuum_haadf_path) as f0:\n",
    "        vacuum_md = f0.getMetadata(0)\n",
    "        vacuum_camera_length = vacuum_md['Microscope Info STEM Camera Length']\n",
    "        vacuum_stem_magnification = vacuum_md['Microscope Info Indicated Magnification']\n",
    "    if vacuum_camera_length != camera_length:\n",
    "        print(f'Vacuum camera length = {camera_length} mm')\n",
    "        raise UserWarning('camera lengths do not match')\n",
    "    if vacuum_stem_magnification != stem_magnification:\n",
    "        print(f'Vacuum STEM magnification = {stem_magnification} kx')\n",
    "        raise UserWarning('STEM magnifications do not match')\n",
    "else:\n",
    "    print('No Vacuum HAADF available')\n",
    "\n",
    "offsets_path, vacuum_scan_num, vacuum_scan_id = get_scan_path(\n",
    "    distiller_path / Path(\"counted\") / Path(date),\n",
    "    scan_num=vacuum_scan_num,\n",
    "    scan_id=vacuum_scan_id,\n",
    "    version=1,\n",
    "    file_suffix=FileSuffix.OFFSETS,\n",
    ")\n",
    "\n",
    "print(offsets_path)\n",
    "com2_filt = ncempy.read(offsets_path)['data']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit the beam motion to reduce noise\n",
    " - If the motion is linear then a plane is sufficient\n",
    " - If the motion is non-linear then use interpolation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Interpolate to fit the vacuum scan_shape\n",
    "# This is not exactly necessary, but tests the use of interpolation for later\n",
    "\n",
    "YY, XX = np.mgrid[0:com2_filt.shape[1], 0:com2_filt.shape[2]]\n",
    "\n",
    "# Interpolation\n",
    "com2_fit = np.zeros((2, *XX.shape))\n",
    "com2_fit[0,:,:] = ndimage.map_coordinates(com2_filt[0,:,:], (YY.ravel(), XX.ravel()),mode='nearest').reshape(XX.shape)\n",
    "com2_fit[1,:,:] = ndimage.map_coordinates(com2_filt[1,:,:], (YY.ravel(), XX.ravel()),mode='nearest').reshape(XX.shape)\n",
    "\n",
    "com2_filt_median = np.median(com2_filt,axis=(1,2))\n",
    "\n",
    "# Fit to a plane\n",
    "planeCOM0 = planeFit(np.stack((YY, XX, com2_filt[0,]-com2_filt_median[0])))\n",
    "planeCOM1 = planeFit(np.stack((YY, XX, com2_filt[1,]-com2_filt_median[1])))\n",
    "\n",
    "print(f'plane fit to COM0: {planeCOM0}')\n",
    "print(f'plane fit to COM1: {planeCOM1}')\n",
    "\n",
    "normal = planeCOM0[1]\n",
    "d = np.dot(-planeCOM0[0], normal)\n",
    "# calculate corresponding z\n",
    "z0 = (-normal[0]*YY - normal[1]*XX - d)/normal[2]\n",
    "\n",
    "normal = planeCOM1[1]\n",
    "d = np.dot(-planeCOM1[0], normal)\n",
    "# calculate corresponding z\n",
    "z1 = (-normal[0]*YY - normal[1]*XX - d)/normal[2]\n",
    "\n",
    "# Plot everything together\n",
    "fg,ax = plt.subplots(2, 3)\n",
    "ax[0, 0].imshow(com2_filt[0,],cmap='bwr')\n",
    "ax[0, 0].set(title='Experimental')\n",
    "ax[0, 1].imshow(z0, cmap='bwr')\n",
    "ax[0, 1].set(title='Linear plane fit')\n",
    "ax[1, 0].imshow(com2_filt[1,],cmap='bwr')\n",
    "ax[1, 1].imshow(z1, cmap='bwr')\n",
    "ax[0, 2].imshow(com2_fit[0,]-com2_filt_median[0], cmap='bwr')\n",
    "ax[1, 2].imshow(com2_fit[1,]-com2_filt_median[1], cmap='bwr')\n",
    "ax[0, 2].set(title='Interpolation');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generate shift corrections for the experimental data set\n",
    " - the experimental data set can have any real space scan shape relative to the vacuum data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "method = 'interp'\n",
    "print(f'Using method {method}')\n",
    "\n",
    "# Generate points on the plane to fit the experiment scan_shape\n",
    "factor = (experiment.scan_shape[0] / com2_filt.shape[1],\n",
    "          experiment.scan_shape[1] / com2_filt.shape[2])\n",
    "\n",
    "# Generate positions between vacuum positions\n",
    "YY, XX = np.mgrid[0:experiment.scan_shape[1], 0:experiment.scan_shape[0]]\n",
    "YY = YY.astype('<f4') / factor[1]\n",
    "XX = XX.astype('<f4') / factor[0]\n",
    "\n",
    "if method == 'interp':\n",
    "    com2_fit = np.zeros((2, *XX.shape))\n",
    "    com2_fit[0,:,:] = ndimage.map_coordinates(com2_filt[0,:,:], (YY.ravel(), XX.ravel()),mode='nearest').reshape(XX.shape)\n",
    "    com2_fit[1,:,:] = ndimage.map_coordinates(com2_filt[1,:,:], (YY.ravel(), XX.ravel()),mode='nearest').reshape(XX.shape)\n",
    "\n",
    "    com2_fit_median = np.median(com2_fit,axis=(1,2))\n",
    "\n",
    "    z0 = com2_fit[0,:,:]\n",
    "    z1 = com2_fit[1,:,:]\n",
    "elif method == 'plane':\n",
    "    normal = planeCOM0[1]\n",
    "    d = np.dot(-planeCOM0[0], normal)\n",
    "    # calculate corresponding z\n",
    "    z0 = (-normal[0]*YY - normal[1]*XX - d)/normal[2]\n",
    "\n",
    "    normal = planeCOM1[1]\n",
    "    d = np.dot(-planeCOM1[0], normal)\n",
    "    # calculate corresponding z\n",
    "    z1 = (-normal[0]*YY - normal[1]*XX - d)/normal[2]\n",
    "else:\n",
    "    print('unknown method. Choose interp or plane.')\n",
    "    \n",
    "# Round to integers\n",
    "z0_round = np.round(z0 - z0.mean()).astype(np.int64)\n",
    "z1_round = np.round(z1 - z1.mean()).astype(np.int64)\n",
    "\n",
    "# Interpolated data must match experimetnal data shape\n",
    "assert experiment.data.shape[0] == z0_round.ravel().shape[0]\n",
    "assert experiment.data.shape[0] == z1_round.ravel().shape[0]\n",
    "\n",
    "fg,ax = plt.subplots(1,2)\n",
    "ax[0].imshow(z0_round,cmap='bwr')\n",
    "ax[1].imshow(z1_round,cmap='bwr')\n",
    "ax[0].set(title='Pattern shift for axis 0')\n",
    "ax[1].set(title='Pattern shift for axis 1');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use the offsets from the vacuum scan to shift the patterns\n",
    "\n",
    "centered = np.empty_like(experiment.data)\n",
    "for ii, (eev, x, y) in enumerate(zip(experiment.data, z0_round.ravel(), z1_round.ravel())):\n",
    "    for jj, ev in enumerate(eev):\n",
    "        evx, evy = np.unravel_index(ev, experiment.frame_shape)\n",
    "        evx_centered = evx - y # need to flip x and y\n",
    "        evy_centered = evy - x\n",
    "\n",
    "        # Some events will get pushed off the detector by the shift. Remove them\n",
    "        keep = (evx_centered < experiment.frame_shape[0]) & (evx_centered >= 0) & (evy_centered < experiment.frame_shape[1]) & (evy_centered >= 0)\n",
    "        evx_centered = evx_centered[keep]\n",
    "        evy_centered = evy_centered[keep]\n",
    "\n",
    "        centered[ii, jj] = np.ravel_multi_index((evx_centered,evy_centered), experiment.frame_shape)\n",
    "\n",
    "experiment_centered = stio.SparseArray(centered, experiment.scan_shape, experiment.frame_shape)\n",
    "\n",
    "dp = stim.calculate_sum_sparse(experiment.data, experiment.frame_shape)\n",
    "dp2 = stim.calculate_sum_sparse(experiment_centered.data, experiment_centered.frame_shape)\n",
    "\n",
    "dp = experiment.sum(axis=(0, 1))\n",
    "dp2 = experiment_centered.sum(axis=(0,1))\n",
    "\n",
    "fg,ax = plt.subplots(2, 2, sharex=True, sharey=True)\n",
    "ax[0, 0].imshow(dp, norm=LogNorm())\n",
    "ax[0, 1].imshow(dp2, norm=LogNorm())\n",
    "ax[0, 0].set(title='raw data')\n",
    "ax[1, 0].imshow(dp)\n",
    "ax[1, 1].imshow(dp2)\n",
    "ax[0, 1].set(title='centered data')\n",
    "fg.tight_layout();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save to a stempy dataset\n",
    "out_path = fname.with_name(fname.stem + '_centered.h5')\n",
    "\n",
    "experiment_centered.write_to_hdf5(out_path)\n",
    "print(out_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "stempy-jupyterlab",
   "language": "python",
   "name": "stempy-jupyterlab"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0076e80ff1ce41629d0188cfd2efd165": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "4389e7f21dcf4397881e1e2bed7e321b": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "MPLCanvasModel",
      "state": {
       "layout": "IPY_MODEL_a2a6668b65f742f6b0495f4ca3ab4b40",
       "toolbar": "IPY_MODEL_96f27e459b0944419098298d8b83a8f5",
       "toolbar_position": "left"
      }
     },
     "481275cf009647ecb0621a4d51f96bd4": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_af77c84a18514d479421a272f5171dd5",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "54653a218c604acf9c53f3be3136e943": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "MPLCanvasModel",
      "state": {
       "_cursor": "default",
       "_figure_label": "Figure 5",
       "_height": 480,
       "_image_mode": "diff",
       "_message": "zoom rect",
       "_rubberband_y": 481,
       "_width": 640,
       "layout": "IPY_MODEL_5a3d18f9a47441cb8bf78bb83058ea5b",
       "toolbar": "IPY_MODEL_8d66954f9b624047a94f3204886c1538",
       "toolbar_position": "left"
      }
     },
     "5a3d18f9a47441cb8bf78bb83058ea5b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "7916c894f1e64f17ab670c729d9cc13f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "7d59805b45c94b759f7dfb494dc8fd50": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "MPLCanvasModel",
      "state": {
       "_cursor": "default",
       "_figure_label": "Figure 4",
       "_height": 480,
       "_width": 640,
       "layout": "IPY_MODEL_c1e6575ff7944f33a556a41ed7ff7180",
       "toolbar": "IPY_MODEL_481275cf009647ecb0621a4d51f96bd4",
       "toolbar_position": "left"
      }
     },
     "891f6d568a364c379f43f651c3795262": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_0076e80ff1ce41629d0188cfd2efd165",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "8d66954f9b624047a94f3204886c1538": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "_current_action": "zoom",
       "layout": "IPY_MODEL_f553296433bf4481958ba96eecc10fa0",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "96f27e459b0944419098298d8b83a8f5": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_ed9c6dfee8e54fe3a91f3aa8ec6a68f6",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "a2a6668b65f742f6b0495f4ca3ab4b40": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "a73b39f7a91040fab39c7e1446aba9b1": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "MPLCanvasModel",
      "state": {
       "_cursor": "default",
       "_figure_label": "Figure 2",
       "_height": 480,
       "_width": 640,
       "layout": "IPY_MODEL_7916c894f1e64f17ab670c729d9cc13f",
       "toolbar": "IPY_MODEL_891f6d568a364c379f43f651c3795262",
       "toolbar_position": "left"
      }
     },
     "a88744b9e7d848a19e1fb64c9b493ffb": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "ToolbarModel",
      "state": {
       "layout": "IPY_MODEL_c7991e40c1d64d388dc45a2518a8ce9e",
       "toolitems": [
        [
         "Home",
         "Reset original view",
         "home",
         "home"
        ],
        [
         "Back",
         "Back to previous view",
         "arrow-left",
         "back"
        ],
        [
         "Forward",
         "Forward to next view",
         "arrow-right",
         "forward"
        ],
        [
         "Pan",
         "Left button pans, Right button zooms\nx/y fixes axis, CTRL fixes aspect",
         "arrows",
         "pan"
        ],
        [
         "Zoom",
         "Zoom to rectangle\nx/y fixes axis, CTRL fixes aspect",
         "square-o",
         "zoom"
        ],
        [
         "Download",
         "Download plot",
         "floppy-o",
         "save_figure"
        ]
       ]
      }
     },
     "af77c84a18514d479421a272f5171dd5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "c1e6575ff7944f33a556a41ed7ff7180": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "c7991e40c1d64d388dc45a2518a8ce9e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "dcc0a51f5e3c48329ea0311ba97b70d8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ed9c6dfee8e54fe3a91f3aa8ec6a68f6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f103de03e63c4bf6974feb75be6c0c14": {
      "model_module": "jupyter-matplotlib",
      "model_module_version": "^0.8.3",
      "model_name": "MPLCanvasModel",
      "state": {
       "_cursor": "default",
       "_figure_label": "Figure 3",
       "_height": 480,
       "_width": 640,
       "layout": "IPY_MODEL_dcc0a51f5e3c48329ea0311ba97b70d8",
       "toolbar": "IPY_MODEL_a88744b9e7d848a19e1fb64c9b493ffb",
       "toolbar_position": "left"
      }
     },
     "f553296433bf4481958ba96eecc10fa0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

import { AnyAction, createAsyncThunk, createSlice, ThunkDispatch } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import {
  authenticate as authenticateAPI,
  refreshToken as refreshTokenAPI,
  getUser as getUserAPI,
  deleteRefreshToken as deleteRefreshTokenAPI,
} from './api';
import { User } from '../../types';
import { apiClient } from '../../client';
import { connectNotifications } from '../notifications';

export interface AuthState {
  user?: User;
  status: 'unknown' | 'authenticated' | 'authenticating' | 'anonymous';
}

const initialState: AuthState = {
  user: undefined,
  status: 'unknown',
};

let refreshController = new AbortController();

type AuthenticatePayload = {username: string, password: string};
export const login = createAsyncThunk<User, AuthenticatePayload>(
  'auth/authenticate',
  async (payload, thunkAPI) => {
    const {username, password} = payload;
    const { dispatch } = thunkAPI;

    const auth = await authenticateAPI(username, password);

    const {access_token, exp } = auth;
    apiClient.setToken(access_token);

    refreshController.abort();
    const controller = new AbortController();
    refreshController = controller;

    setTimeout(() => {
      refreshToken(true, thunkAPI.dispatch, controller.signal);
    }, (exp - 30) * 1000); // Refresh 30 seconds before actual expiration

    dispatch(connectNotifications());

    const user = await getUserAPI();

    return user;
  }
);

async function refreshToken(autoRefresh: boolean, dispatch: ThunkDispatch<unknown, unknown, AnyAction>, signal: AbortSignal) {
  try {
    const auth = await refreshTokenAPI();

    const {access_token, exp } = auth;
    apiClient.setToken(access_token);

    if (autoRefresh) {
      setTimeout(() => {
        if (!signal.aborted) {
          refreshToken(autoRefresh, dispatch, signal);
        }
      }, (exp - 30) * 1000); // Refresh 30 seconds before actual expiration
    }
  } catch(e) {
    dispatch(logout());
    throw e;
  }
}

export const restoreSession = createAsyncThunk<User, void>(
  'auth/restore_session',
  async (_payload, thunkAPI) => {
    try {
      const { dispatch } = thunkAPI;

      refreshController.abort();
      const controller = new AbortController();
      refreshController = controller;

      await refreshToken(true, thunkAPI.dispatch, controller.signal);

      dispatch(connectNotifications());

      const user = await getUserAPI();

      return user;
    } catch (e) {
      throw e;
    }
  }
)

export const logout = createAsyncThunk<void, void>(
  'auth/logout',
  async (_payload, _thunkAPI) => {
    try {
      refreshController.abort();
      await deleteRefreshTokenAPI();
      apiClient.setToken(undefined);
    } catch (e) {
      throw e;
    }
  }
)

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(login.pending, (state) => {
        state.status = 'authenticating';
        state.user = undefined;
      })
      .addCase(login.rejected, (state) => {
        state.status = 'anonymous';
        state.user = undefined;
      })
      .addCase(login.fulfilled, (state, action) => {
        state.status = 'authenticated';
        state.user = action.payload;
      })
      .addCase(logout.fulfilled, (state) => {
        state.status = 'anonymous';
        state.user = undefined;
      })
      .addCase(restoreSession.fulfilled, (state, action) => {
        state.status = 'authenticated';
        state.user = action.payload;
      });
  },
});

export const isAuthenticated = (state: RootState) => state.auth.status === 'authenticated';
export const authStatus = (state: RootState) => state.auth.status;
export const getUser = (state: RootState) => state.auth.user;

export default authSlice.reducer;

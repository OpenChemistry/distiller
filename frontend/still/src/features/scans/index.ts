import { createAsyncThunk, createSlice, createEntityAdapter, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import {
  getScans as getScansAPI,
  patchScan as patchScanAPI,
} from './api';
import { Scan, IdType } from '../../types';

export const scansAdapter = createEntityAdapter<Scan>();

export interface ScansState extends ReturnType<typeof scansAdapter['getInitialState']> {
  status: 'idle' | 'loading' | 'complete';
}

const initialState: ScansState = scansAdapter.getInitialState({status: 'idle'});

export const getScans = createAsyncThunk<Scan[]>(
  'scans/fetch',
  async (_payload, _thunkAPI) => {
    const scans = await getScansAPI();

    return scans;
  }
);

export const patchScan = createAsyncThunk<Scan, {id: IdType; updates: Partial<Scan>;}>(
  'scans/patch',
  async (payload, _thunkAPI) => {
    const {id, updates} = payload;
    const scan = await patchScanAPI(id, updates);

    return scan;
  }
)

export const scansSlice = createSlice({
  name: 'scans',
  initialState,
  reducers: {
    setScan(state, action: PayloadAction<Scan>) {
      scansAdapter.setOne(state, action.payload)
    },
    updateScan(state, action: PayloadAction<Partial<Scan>>) {
      // const currentScan = scansSelector.selectById
      const {id, ...changes} = action.payload;
      if (id !== undefined) {
        scansAdapter.updateOne(state, {id, changes});
      }
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getScans.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getScans.rejected, (state) => {
        state.status = 'idle';
      })
      .addCase(getScans.fulfilled, (state, action) => {
        state.status = 'complete';
        scansAdapter.setAll(state, action.payload);
      })
      .addCase(patchScan.fulfilled, (state, action) => {
        scansAdapter.setOne(state, action.payload);
      })
  },
});

export const scansSelector = scansAdapter.getSelectors<RootState>(state => state.scans);

export const { setScan, updateScan } = scansSlice.actions;

export default scansSlice.reducer;
